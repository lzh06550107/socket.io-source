var debug = require('debug')('socket')
var clients = {}

module.exports.clients = clients
module.exports.Server = p2pSocket

function p2pSocket(socket, next, room) {
    clients[socket.id] = socket // 记录socket id与socket对象映射
    if (typeof room === 'object') { // 作为socket中间件
        var connectedClients = socket.adapter.rooms[room.name]
    } else { // 作为命名空间中间件
        var connectedClients = clients
    }

    // 执行中间件函数会触发numClients事件
    socket.emit('numClients', Object.keys(connectedClients).length - 1)

    socket.on('disconnect', function () {
        delete clients[socket.id]
        Object.keys(connectedClients).forEach(function (clientId, i) {
            var client = clients[clientId]
            client.emit('peer-disconnect', {peerId: socket.id})
        })
        debug('Client gone (id=' + socket.id + ').')
    })

    // 当传入多个offers时，执行
    socket.on('offers', function (data) {
        // send offers to everyone in a given room
        Object.keys(connectedClients).forEach(function (clientId, i) {
            var client = clients[clientId]
            if (client !== socket) { // 如果不是当前连接
                var offerObj = data.offers[i]
                var emittedOffer = {fromPeerId: socket.id, offerId: offerObj.offerId, offer: offerObj.offer}
                debug('Emitting offer: %s', JSON.stringify(emittedOffer))
                client.emit('offer', emittedOffer)
            }
        })
    })

    socket.on('peer-signal', function (data) {
        var toPeerId = data.toPeerId
        debug('Signal peer id %s', toPeerId);
        var client = clients[toPeerId]
        client.emit('peer-signal', data)
    })

    typeof next === 'function' && next()
}
