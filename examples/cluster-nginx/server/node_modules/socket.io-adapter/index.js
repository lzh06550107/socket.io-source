
/**
 * Module dependencies.
 */

var Emitter = require('events').EventEmitter;

/**
 * Module exports.
 */

module.exports = Adapter;

/**
 * Memory adapter constructor.
 *
 * @param {Namespace} nsp
 * @api public
 */

function Adapter(nsp){
  this.nsp = nsp; // 命名空间对象，里面保存Socket对象
  this.rooms = {}; // 房间名称和房间对象映射表，其中房间对象包含socket id
  this.sids = {}; // socket id与房间名称映射表
  this.encoder = nsp.server.encoder;
}

/**
 * Inherits from `EventEmitter`.
 */

Adapter.prototype.__proto__ = Emitter.prototype;

/**
 * Adds a socket to a room.增加指定的连接到指定的房间
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.add = function(id, room, fn){
  return this.addAll(id, [ room ], fn);
};

/**
 * Adds a socket to a list of room.增加指定的连接到多个房间
 *
 * @param {String} socket id
 * @param {String} rooms
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.addAll = function(id, rooms, fn){
  for (var i = 0; i < rooms.length; i++) {
    var room = rooms[i]; // 获取传入的一个房间
    this.sids[id] = this.sids[id] || {}; // 当前socket 集合中不存在，则初始化空对象
    this.sids[id][room] = true; // 标记指定socket id 加入指定的房间
    this.rooms[room] = this.rooms[room] || Room();
    this.rooms[room].add(id); // 在房间对象中添加socket id
  }
  if (fn) process.nextTick(fn.bind(null, null)); // 执行回调函数
};

/**
 * Removes a socket from a room. 删除指定连接加入的房间
 *
 * @param {String} socket id
 * @param {String} room name
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.del = function(id, room, fn){
  if (this.sids[id]) delete this.sids[id][room]; // 清除指定socket id与指定房间名称映射关系

  if (this.rooms.hasOwnProperty(room)) {
    this.rooms[room].del(id); // 清除房间名称和socket id映射关系
    // 当指定房间长度为0，表示该房间已经没有连接，清除该房间对象
    if (this.rooms[room].length === 0) delete this.rooms[room];
  }

  if (fn) process.nextTick(fn.bind(null, null)); // 执行回调函数
};

/**
 * Removes a socket from all rooms it's joined.从连接加入的所有房间移除指定连接
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.delAll = function(id, fn){
  var rooms = this.sids[id]; // 获取连接加入的所有房间名称
  if (rooms) {
    for (var room in rooms) {
      if (this.rooms.hasOwnProperty(room)) {
        this.rooms[room].del(id); // 从房间中删除指定连接
        // 当指定房间长度为0，表示该房间已经没有连接，清除该房间对象
        if (this.rooms[room].length === 0) delete this.rooms[room];
      }
    }
  }
  delete this.sids[id]; // 当指定连接关联房间名称为空，则清除

  if (fn) process.nextTick(fn.bind(null, null)); // 执行回调函数
};

/**
 * Broadcasts a packet.在本地节点服务器内广播一个数据包
 *
 * Options:
 *  - `flags` {Object} flags for this packet
 *  - `except` {Array} sids that should be excluded
 *  - `rooms` {Array} list of rooms to broadcast to
 *
 * @param {Object} packet object
 * @api public
 */

Adapter.prototype.broadcast = function(packet, opts){
  var rooms = opts.rooms || []; // 广播的房间
  var except = opts.except || []; // 排除的连接
  var flags = opts.flags || {}; // 数据包的标记
  var packetOpts = {
    preEncoded: true,
    volatile: flags.volatile,
    compress: flags.compress
  };
  var ids = {}; // 记录已经发送过消息的socket
  var self = this;
  var socket;

  packet.nsp = this.nsp.name; // 记录命名空间到包属性
  // 对数据包编码并查询所有连接来发送数据包
  this.encoder.encode(packet, function(encodedPackets) {
    if (rooms.length) {
      for (var i = 0; i < rooms.length; i++) {
        var room = self.rooms[rooms[i]]; // 找到房间对象
        if (!room) continue;
        var sockets = room.sockets; // 找到房间对象包含的所有socket id
        for (var id in sockets) {
          if (sockets.hasOwnProperty(id)) {
            if (ids[id] || ~except.indexOf(id)) continue;
            socket = self.nsp.connected[id]; // 通过socket id获取Socket对象
            if (socket) {
              // 通过Socket对象发送消息
              socket.packet(encodedPackets, packetOpts);
              ids[id] = true; // 标记该连接已经发送消息
            }
          }
        }
      }
    } else { // 如果没有指定广播的房间，则对当前命名空间的所有连接广播
      for (var id in self.sids) {
        if (self.sids.hasOwnProperty(id)) {
          if (~except.indexOf(id)) continue;
          socket = self.nsp.connected[id]; // 通过socket id获取Socket对象
          // 通过Socket对象发送消息
          if (socket) socket.packet(encodedPackets, packetOpts);
        }
      }
    }
  });
};

/**
 * Gets a list of clients by sid.
 *
 * @param {Array} explicit set of rooms to check.
 * @param {Function} callback
 * @api public
 */

Adapter.prototype.clients = function(rooms, fn){
  if ('function' == typeof rooms){
    fn = rooms;
    rooms = null;
  }

  rooms = rooms || [];

  var ids = {}; // 记录已经处理过的socket
  var sids = []; // 保存收集的sid
  var socket;

  if (rooms.length) {
    for (var i = 0; i < rooms.length; i++) {
      var room = this.rooms[rooms[i]];
      if (!room) continue;
      var sockets = room.sockets;
      for (var id in sockets) {
        if (sockets.hasOwnProperty(id)) {
          if (ids[id]) continue;
          socket = this.nsp.connected[id];
          if (socket) {
            sids.push(id);
            ids[id] = true;
          }
        }
      }
    }
  } else { // 如果没有指定广播的房间，则对当前命名空间的所有连接广播
    for (var id in this.sids) {
      if (this.sids.hasOwnProperty(id)) {
        socket = this.nsp.connected[id];
        if (socket) sids.push(id);
      }
    }
  }

  if (fn) process.nextTick(fn.bind(null, null, sids)); // 执行回调函数
};

/**
 * Gets the list of rooms a given client has joined.
 * 获取指定socket id加入的所有房间
 *
 * @param {String} socket id
 * @param {Function} callback
 * @api public
 */
Adapter.prototype.clientRooms = function(id, fn){
  var rooms = this.sids[id]; // 返回所有房间
  if (fn) process.nextTick(fn.bind(null, null, rooms ? Object.keys(rooms) : null));
};

/**
* Room constructor.房间对象构造器
*
* @api private
*/

function Room(){
  if (!(this instanceof Room)) return new Room();
  this.sockets = {}; // 里面是该房间的所有连接socket id
  this.length = 0; // 该房间包含的连接数
}

/**
 * Adds a socket to a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.add = function(id){
  if (!this.sockets.hasOwnProperty(id)) {
    this.sockets[id] = true; // 标记socket id为已经加入该房间
    this.length++;
  }
};

/**
 * Removes a socket from a room.
 *
 * @param {String} socket id
 * @api private
 */

Room.prototype.del = function(id){
  if (this.sockets.hasOwnProperty(id)) {
    delete this.sockets[id];
    this.length--;
  }
};
